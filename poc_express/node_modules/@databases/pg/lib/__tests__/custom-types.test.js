"use strict";

var __awaiter = undefined && undefined.__awaiter || function (thisArg, _arguments, P, generator) {
  return new (P || (P = Promise))(function (resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : new P(function (resolve) {
        resolve(result.value);
      }).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};
Object.defineProperty(exports, "__esModule", { value: true });
const __1 = require("../");
const sql_1 = require("@databases/sql");
jest.setTimeout(30000);
const db = __1.default();
var Currency;
(function (Currency) {
  Currency["USD"] = "USD";
  Currency["GBP"] = "GBP";
})(Currency || (Currency = {}));
class MoneyWithCurrency {
  constructor(value, currency, description) {
    this.value = value;
    this.currency = currency;
    this.description = description;
  }
}
sql_1.default.registerFormatter(MoneyWithCurrency, v => {
  return sql_1.default`ROW (${v.value}, ${v.currency}, ${v.description})`;
});
class BalancePair {
  constructor(income, expenditure) {
    this.income = income;
    this.expenditure = expenditure;
  }
}
sql_1.default.registerFormatter(BalancePair, v => {
  return sql_1.default`ROW (${v.income}, ${v.expenditure})`;
});
test('custom types', () => __awaiter(undefined, void 0, void 0, function* () {
  yield db.query(sql_1.default`CREATE SCHEMA custom_types`);
  yield db.query(sql_1.default`
      CREATE DOMAIN custom_types.email AS TEXT CHECK (VALUE ~ '^.+@.+$');
      CREATE TYPE custom_types.currency AS ENUM('USD', 'GBP');

      CREATE TYPE custom_types.money_with_currency AS (
        value NUMERIC(1000, 2),
        currency custom_types.currency,
        description TEXT
      );
      CREATE TYPE custom_types.balance_pair AS (
        income custom_types.money_with_currency,
        expenditure custom_types.money_with_currency
      );

      CREATE TABLE custom_types.accounts (
        email custom_types.email NOT NULL PRIMARY KEY,
        balance custom_types.money_with_currency
      );
      CREATE TABLE custom_types.balance_pairs (
        balance custom_types.balance_pair
      );
    `);
  const [parseNumeric, parseCurrency, parseText] = yield Promise.all([db.getTypeParser('numeric'), db.getTypeParser('custom_types.currency'), db.getTypeParser('TEXT')]);
  const parseMoneyWithCurrency = yield db.registerTypeParser('custom_types.money_with_currency', value => {
    const [v, currency, description] = db.parseComposite(value);
    return new MoneyWithCurrency(parseNumeric(v), parseCurrency(currency), parseText(description));
  });
  yield db.registerTypeParser('custom_types.balance_pair', value => {
    const [income, expenditure] = db.parseComposite(value);
    return new BalancePair(parseMoneyWithCurrency(income), parseMoneyWithCurrency(expenditure));
  });
  const insert = sql_1.default`
    INSERT INTO custom_types.accounts (email, balance)
    VALUES
      (
        ${'forbes@lindesay.co.uk'},
        ${new MoneyWithCurrency('10.20', Currency.USD, 'This is a wonderful "description"!')}
      ),
      (
        ${'dee@lindesay.co.uk'},
        ${new MoneyWithCurrency('100.01', Currency.GBP, 'Descriptions can contain one thing, and another, and another.')}
      );
  `;
  expect({
    text: insert.text,
    values: insert.values
  }).toMatchInlineSnapshot(`
Object {
  "text": "INSERT INTO custom_types.accounts (email, balance) VALUES ( $1, ROW ($2, $3, $4) ), ( $5, ROW ($6, $7, $8) );",
  "values": Array [
    "forbes@lindesay.co.uk",
    "10.20",
    "USD",
    "This is a wonderful \\"description\\"!",
    "dee@lindesay.co.uk",
    "100.01",
    "GBP",
    "Descriptions can contain one thing, and another, and another.",
  ],
}
`);
  yield db.query(insert);
  yield db.query(sql_1.default`
    INSERT INTO custom_types.balance_pairs (balance)
    VALUES (${new BalancePair(new MoneyWithCurrency('10', Currency.GBP, 'Hello World'), new MoneyWithCurrency('10', Currency.USD, 'Goodbye World'))})
  `);
  expect((yield db.query(sql_1.default`
        SELECT * FROM custom_types.accounts;
      `))).toMatchInlineSnapshot(`
Array [
  Object {
    "balance": MoneyWithCurrency {
      "currency": "USD",
      "description": "This is a wonderful \\"description\\"!",
      "value": "10.20",
    },
    "email": "forbes@lindesay.co.uk",
  },
  Object {
    "balance": MoneyWithCurrency {
      "currency": "GBP",
      "description": "Descriptions can contain one thing, and another, and another.",
      "value": "100.01",
    },
    "email": "dee@lindesay.co.uk",
  },
]
`);
  expect((yield db.query(sql_1.default`
        SELECT * FROM custom_types.balance_pairs;
      `))).toMatchInlineSnapshot(`
Array [
  Object {
    "balance": BalancePair {
      "expenditure": MoneyWithCurrency {
        "currency": "USD",
        "description": "Goodbye World",
        "value": "10.00",
      },
      "income": MoneyWithCurrency {
        "currency": "GBP",
        "description": "Hello World",
        "value": "10.00",
      },
    },
  },
]
`);
}));
//# sourceMappingURL=custom-types.test.js.map