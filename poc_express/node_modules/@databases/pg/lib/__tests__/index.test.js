"use strict";

var __awaiter = undefined && undefined.__awaiter || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : new P(function (resolve) {
                resolve(result.value);
            }).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const __1 = require("../");
const sql_1 = require("@databases/sql");
jest.setTimeout(30000);
const db = __1.default();
const db2 = __1.default();
const db3 = __1.default();
test('error messages', () => __awaiter(undefined, void 0, void 0, function* () {
    try {
        yield db.query(sql_1.default`
      SELECT * FROM foo;
      SELECT * FROM bar WHERE id = ${'Hello World, Goodbye World, etc.'};
      SELECT * FRM baz;
      SELECT * FROM bing;
    `);
    } catch (ex) {
        expect(ex.message).toMatchInlineSnapshot(`
"syntax error at or near \\"FRM\\"

  2 |       SELECT * FROM foo;
  3 |       SELECT * FROM bar WHERE id = $1;
> 4 |       SELECT * FRM baz;
    |                ^^^
  5 |       SELECT * FROM bing;
  6 |     
"
`);
        return;
    }
    expect(false).toBe(true);
}));
test('query', () => __awaiter(undefined, void 0, void 0, function* () {
    const [{ foo }] = yield db.query(sql_1.default`SELECT 1 + 1 as foo`);
    expect(foo).toBe(2);
}));
test('query with params', () => __awaiter(undefined, void 0, void 0, function* () {
    const [{ foo }] = yield db.query(sql_1.default`SELECT 1 + ${41} as ${sql_1.default.ident('foo')}`);
    expect(foo).toBe(42);
}));
test('bigint', () => __awaiter(undefined, void 0, void 0, function* () {
    yield db.query(sql_1.default`CREATE SCHEMA bigint_test`);
    yield db.query(sql_1.default`CREATE TABLE bigint_test.bigints (id BIGINT NOT NULL PRIMARY KEY);`);
    yield db.query(sql_1.default`
    INSERT INTO bigint_test.bigints (id)
    VALUES (1),
           (2),
           (42);
  `);
    const result = yield db.query(sql_1.default`SELECT id from bigint_test.bigints;`);
    expect(result).toEqual([{ id: 1 }, { id: 2 }, { id: 42 }]);
    // tslint:disable-next-line:no-void-expression
    expect((yield db.dispose())).toBe(undefined);
    expect((yield db2.query(sql_1.default`SELECT id from bigint_test.bigints;`))).toEqual([{ id: 1 }, { id: 2 }, { id: 42 }]);
    yield db2.dispose();
    expect((yield db3.query(sql_1.default`SELECT id from bigint_test.bigints;`))).toEqual([{ id: 1 }, { id: 2 }, { id: 42 }]);
    yield db3.dispose();
}));
//# sourceMappingURL=index.test.js.map